apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    service: reverse-proxy-service
  name: reverse-proxy-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      service: reverse-proxy-service
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        io.kompose.network/reverse-proxy-network: "true"
        service: reverse-proxy-service
    spec:
      containers:
        - image: javidchaji/reverse-proxy
          name: reverse-proxy-container
          ports:
            - containerPort: 9001
            - containerPort: 9002
          resources:
            limits:
              cpu: 500m
              memory: "52428800"
            requests:
              cpu: 250m
              memory: "20971520"
          tty: true
          volumeMounts:
            - mountPath: /etc/nginx/nginx.conf
              name: reverse-proxy-claim0
            - mountPath: /etc/nginx/conf.d/default.conf
              name: reverse-proxy-claim1
            - mountPath: /etc/nginx/conf.d/ping_pong.conf
              name: reverse-proxy-claim2
            - mountPath: /etc/nginx/conf.d/sakila_manager.conf
              name: reverse-proxy-claim3
      restartPolicy: Always
      volumes:
        - name: reverse-proxy-claim0
          persistentVolumeClaim:
            claimName: reverse-proxy-claim0
        - name: reverse-proxy-claim1
          persistentVolumeClaim:
            claimName: reverse-proxy-claim1
        - name: reverse-proxy-claim2
          persistentVolumeClaim:
            claimName: reverse-proxy-claim2
        - name: reverse-proxy-claim3
          persistentVolumeClaim:
            claimName: reverse-proxy-claim3
status: {}

---
# reverse-proxy-service
apiVersion: v1
kind: Service
metadata:
  labels:
    service: reverse-proxy-service
  name: reverse-proxy-service
spec:
  type: LoadBalancer
  ports:
    - name: "9001"
      port: 9001
      targetPort: 9001
      nodePort: 30101
    - name: "9002"
      port: 9002
      targetPort: 9002
      nodePort: 30102
  selector:
    service: reverse-proxy-service
status:
  loadBalancer: {}

---
# reverse-proxy-claim0
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  labels:
    service: reverse-proxy-claim0
  name: reverse-proxy-claim0
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
status: {}

---
# reverse-proxy-claim1
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  labels:
    service: reverse-proxy-claim1
  name: reverse-proxy-claim1
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
status: {}

---
# reverse-proxy-claim2
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  labels:
    service: reverse-proxy-claim2
  name: reverse-proxy-claim2
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
status: {}

---
# reverse-proxy-claim3
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  labels:
    service: reverse-proxy-claim3
  name: reverse-proxy-claim3
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
status: {}
